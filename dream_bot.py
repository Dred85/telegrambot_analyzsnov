import logging
import os
import random
from typing import Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å —Å–∏–º–≤–æ–ª–æ–≤ —Å–Ω–æ–≤
DREAM_SYMBOLS = {
    # –ñ–∏–≤–æ—Ç–Ω—ã–µ
    '–∫–æ—Ç': ['–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å', '–∏–Ω—Ç—É–∏—Ü–∏—è', '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å'],
    '—Å–æ–±–∞–∫–∞': ['–≤–µ—Ä–Ω–æ—Å—Ç—å', '–¥—Ä—É–∂–±–∞', '–∑–∞—â–∏—Ç–∞'],
    '–ø—Ç–∏—Ü–∞': ['—Å–≤–æ–±–æ–¥–∞', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å', '–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'],
    '—Ä—ã–±–∞': ['–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ', '—ç–º–æ—Ü–∏–∏', '–∏–Ω—Ç—É–∏—Ü–∏—è'],
    '–∑–º–µ—è': ['—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è', '–º—É–¥—Ä–æ—Å—Ç—å', '—Å–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–∞—Ö–∏'],
    '–ª–æ—à–∞–¥—å': ['—Å–∏–ª–∞', '—ç–Ω–µ—Ä–≥–∏—è', '–±–ª–∞–≥–æ—Ä–æ–¥—Å—Ç–≤–æ'],
    '–º–µ–¥–≤–µ–¥—å': ['—Å–∏–ª–∞', '–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ', '–∑–∞—â–∏—Ç–∞'],
    '–≤–æ–ª–∫': ['–∏–Ω—Å—Ç–∏–Ω–∫—Ç—ã', '—Å–≤–æ–±–æ–¥–∞', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ'],
    # –ü—Ä–∏—Ä–æ–¥–∞
    '–≤–æ–¥–∞': ['—ç–º–æ—Ü–∏–∏', '–æ—á–∏—â–µ–Ω–∏–µ', '–ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ'],
    '–º–æ—Ä–µ': ['–≥–ª—É–±–æ–∫–∏–µ —á—É–≤—Å—Ç–≤–∞', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å', '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å'],
    '–æ–≥–æ–Ω—å': ['—Å—Ç—Ä–∞—Å—Ç—å', '—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ', '–æ—á–∏—â–µ–Ω–∏–µ'],
    '–ª–µ—Å': ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å', '—Ä–æ—Å—Ç', '—Ç–∞–π–Ω—ã'],
    '–≥–æ—Ä–∞': ['–ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è', '—Ü–µ–ª–∏', '–¥—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç'],
    '–¥–æ–∂–¥—å': ['–æ—á–∏—â–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ø–µ—á–∞–ª—å'],
    '—Å–æ–ª–Ω—Ü–µ': ['—ç–Ω–µ—Ä–≥–∏—è', '–∂–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞', '–ø—Ä–æ—Å–≤–µ—Ç–ª–µ–Ω–∏–µ'],
    '–ª—É–Ω–∞': ['–∏–Ω—Ç—É–∏—Ü–∏—è', '–∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—Ü–∏–∫–ª—ã'],
    # –î–µ–π—Å—Ç–≤–∏—è
    '–ª–µ—Ç–∞—Ç—å': ['—Å–≤–æ–±–æ–¥–∞', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ', '–≤—ã—Å–æ–∫–∏–µ —Ü–µ–ª–∏'],
    '–±–µ–≥–∞—Ç—å': ['–±–µ–≥—Å—Ç–≤–æ', '—Å–ø–µ—à–∫–∞', '–¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏'],
    '–ø–ª–∞–≤–∞—Ç—å': ['—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–≥—Ä—É–∂–µ–Ω–∏–µ', '–∞–¥–∞–ø—Ç–∞—Ü–∏—è', '—Ç–µ—á–µ–Ω–∏–µ –∂–∏–∑–Ω–∏'],
    '–ø–∞–¥–∞—Ç—å': ['–ø–æ—Ç–µ—Ä—è –∫–æ–Ω—Ç—Ä–æ–ª—è', '—Å—Ç—Ä–∞—Ö–∏', '–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å'],
    '—Ç–∞–Ω—Ü–µ–≤–∞—Ç—å': ['—Ä–∞–¥–æ—Å—Ç—å', '—Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ', '–≥–∞—Ä–º–æ–Ω–∏—è'],
    # –¶–≤–µ—Ç–∞
    '–∫—Ä–∞—Å–Ω—ã–π': ['—Å—Ç—Ä–∞—Å—Ç—å', '—ç–Ω–µ—Ä–≥–∏—è', '–≥–Ω–µ–≤'],
    '—Å–∏–Ω–∏–π': ['—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '–º—É–¥—Ä–æ—Å—Ç—å', '–ø–µ—á–∞–ª—å'],
    '–∑–µ–ª–µ–Ω—ã–π': ['—Ä–æ—Å—Ç', '–ø—Ä–∏—Ä–æ–¥–∞', '–∏—Å—Ü–µ–ª–µ–Ω–∏–µ'],
    '–∂–µ–ª—Ç—ã–π': ['—Ä–∞–¥–æ—Å—Ç—å', '–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ'],
    '—á–µ—Ä–Ω—ã–π': ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å', '—Ç–∞–π–Ω–∞', '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è'],
    '–±–µ–ª—ã–π': ['—á–∏—Å—Ç–æ—Ç–∞', '–Ω–æ–≤–æ–µ –Ω–∞—á–∞–ª–æ', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å'],
    # –û–±—ä–µ–∫—Ç—ã
    '–¥–æ–º': ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '—Å–µ–º—å—è', '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä'],
    '–º–∞—à–∏–Ω–∞': ['–∫–æ–Ω—Ç—Ä–æ–ª—å', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏', '–ø—Ä–æ–≥—Ä–µ—Å—Å'],
    '–º–æ—Å—Ç': ['–ø–µ—Ä–µ—Ö–æ–¥', '—Å–≤—è–∑—å', '–ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π'],
    '–ª–µ—Å—Ç–Ω–∏—Ü–∞': ['–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '–¥—É—Ö–æ–≤–Ω—ã–π —Ä–æ—Å—Ç', '—É—Å–∏–ª–∏—è'],
    '–∑–µ—Ä–∫–∞–ª–æ': ['—Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏–µ', '–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ', '–∏—Å—Ç–∏–Ω–∞'],
    '–∫–ª—é—á': ['—Ä–µ—à–µ–Ω–∏—è', '—Ç–∞–π–Ω—ã', '–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'],
}

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
PREDICTIONS = [
    "–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ç–µ–±—è –∂–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω—ã–π —Å—é—Ä–ø—Ä–∏–∑! üéÅ",
    "–°–∫–æ—Ä–æ —Ç—ã –≤—Å—Ç—Ä–µ—Ç–∏—à—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üë§",
    "–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ ‚ú®",
    "–¢–≤–æ—è –∏–Ω—Ç—É–∏—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ üîÆ",
    "–û–∂–∏–¥–∞–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏ üíï",
    "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –ø–æ—Å–µ—Ç–∏—Ç —Ç–µ–±—è üé®",
    "–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –Ω–µ –∑–∞ –≥–æ—Ä–∞–º–∏ üí∞",
    "–í—Ä–µ–º—è –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π —É–∂–µ –±–ª–∏–∑–∫–æ üå±",
    "–°—Ç–∞—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥—É—Ç —Å–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ üîì",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è üåç",
    "–¢—ã –ø–æ–ª—É—á–∏—à—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ üì©",
    "–°–∫–æ—Ä–æ –ø—Ä–∏–¥–µ—Ç —è—Å–Ω–æ—Å—Ç—å –≤ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ üß≠",
    "–¢—ã –æ–±—Ä–µ—Ç–µ—à—å –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞ üêæ",
    "–°–Ω—ã –ø–æ–¥—Å–∫–∞–∂—É—Ç –≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ üåô",
    "–£–ª—ã–±–∫–∞ –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞ –∏–∑–º–µ–Ω–∏—Ç —Ç–≤–æ–π –¥–µ–Ω—å üòä",
    "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —à–∞–Ω—Å —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–≤–Ω—é—é –º–µ—á—Ç—É üå†",
    "–¢—ã –Ω–∞–π–¥–µ—à—å —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –∏—Å–∫–∞–ª üîç",
    "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ä–∞–¥–æ—Å—Ç—å üéâ",
    "–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç –æ—Ç–∫—É–¥–∞ –Ω–µ –∂–¥–∞–ª–∏ üå¨Ô∏è",
    "–¢–≤–æ–∏ —É—Å–∏–ª–∏—è –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –æ–∫—É–ø—è—Ç—Å—è üìà",
    "–°–∫–æ—Ä–æ —Ç—ã —É–∑–Ω–∞–µ—à—å –≤–∞–∂–Ω—É—é –∏—Å—Ç–∏–Ω—É üßò‚Äç‚ôÇÔ∏è",
    "–ù–∞—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞ üåø",
    "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è —Å—Ç–æ—Ä–∏—Ü–µ–π üíû",
    "–¢—ã –±—É–¥–µ—à—å –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è üåü",
    "–ù–æ—á—å –ø–æ–¥–∞—Ä–∏—Ç —è—Ä–∫–∏–µ —Å–Ω—ã –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ üõå",
    "–û–¥–∏–Ω —à–∞–≥ –∏–∑–º–µ–Ω–∏—Ç –≤—Å—ë üîÅ",
    "–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–≤–æ–¥ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ü•≥",
    "–¢—ã –æ–±—Ä–µ—Ç–µ—à—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ üí™",
    "–ß—É–¥–æ —É–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ —Ç–µ–±–µ ‚ú®",
    "–°—Ç–∞—Ä—ã–π –∑–Ω–∞–∫–æ–º—ã–π –Ω–∞–ø–æ–º–Ω–∏—Ç –æ —Å–µ–±–µ üìû",
    "–¢—ã –Ω–∞–π–¥–µ—à—å –±–∞–ª–∞–Ω—Å –∏ –≥–∞—Ä–º–æ–Ω–∏—é ‚öñÔ∏è",
    "–õ—é–±–æ–≤—å –ø—Ä–æ—è–≤–∏—Ç—Å—è –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö ‚ù§Ô∏è",
    "–ü—Ä–µ–¥—Å—Ç–æ–∏—Ç —É–¥–∞—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ üõçÔ∏è",
    "–¢—ã –ø–æ–ª—É—á–∏—à—å –∑–Ω–∞–∫ —Å–≤—ã—à–µ ‚òÅÔ∏è",
    "–ü–æ—è–≤–∏—Ç—Å—è —à–∞–Ω—Å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ üîÅ",
    "–¢—ã –∑–∞–º–µ—Ç–∏—à—å —Ç–æ, —á—Ç–æ —Ä–∞–Ω—å—à–µ —É–ø—É—Å–∫–∞–ª üëÅÔ∏è",
    "–í —Ç–µ–±–µ –ø—Ä–æ—Å–Ω–µ—Ç—Å—è —Å–∫—Ä—ã—Ç—ã–π —Ç–∞–ª–∞–Ω—Ç üß†",
    "–ü—Ä–æ–µ–∫—Ç, –Ω–∞–¥ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å, –ø—Ä–∏–Ω–µ—Å–µ—Ç —É—Å–ø–µ—Ö üíº",
    "–¢—ã –æ–±—Ä–µ—Ç–µ—à—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ üïäÔ∏è",
    "–ù–æ–≤–∞—è –¥–≤–µ—Ä—å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π üö™",
    "–ö—Ç–æ-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é üìú",
    "–¢—ã –≤–¥–æ—Ö–Ω–æ–≤–∏—à—å –¥—Ä—É–≥–∏—Ö —Å–≤–æ–∏–º –ø—Ä–∏–º–µ—Ä–æ–º üåü",
    "–¢–≤–æ—è —ç–Ω–µ—Ä–≥–∏—è –ø—Ä–∏–≤–ª–µ—á–µ—Ç –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ‚ö°",
    "–¢—ã –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–∑ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ü§ù",
    "–ü–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—è–≤–∏—Ç—å —Å–µ–±—è üé§",
    "–°–∫–æ—Ä–æ —Ç—ã –ø–æ–π–º–µ—à—å, –∑–∞—á–µ–º –≤—Å—ë —ç—Ç–æ –±—ã–ª–æ üîÑ",
    "–°–±—É–¥–µ—Ç—Å—è –æ–¥–Ω–æ –∏–∑ —Ç–≤–æ–∏—Ö –∂–µ–ª–∞–Ω–∏–π üí´",
    "–¢—ã –±—É–¥–µ—à—å –æ–∫—Ä—É–∂—ë–Ω –∑–∞–±–æ—Ç–æ–π –∏ —Ç–µ–ø–ª–æ–º ‚òï",
    "–ò–Ω—Ç—É–∏—Ü–∏—è –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å üß≠",
    "–í —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –±–µ–ª–∞—è –ø–æ–ª–æ—Å–∞ üèÅ"
]

# –°—Ç–∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
ANALYSIS_STYLES = {
    'mystical': {
        'name': 'üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π',
        'prefix': '–î—Ä–µ–≤–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≥–æ–≤–æ—Ä—è—Ç...',
        'emojis': ['üîÆ', '‚ú®', 'üåô', '‚≠ê', 'üí´']
    },
    'scientific': {
        'name': 'üß† –ù–∞—É—á–Ω—ã–π',
        'prefix': '–° —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏...',
        'emojis': ['üß†', 'üìä', 'üî¨', 'üìà', 'üí°']
    },
    'fun': {
        'name': 'üòÑ –í–µ—Å–µ–ª—ã–π',
        'prefix': '–¢–≤–æ–π —Å–æ–Ω –≥–æ–≤–æ—Ä–∏—Ç...',
        'emojis': ['üòÑ', 'üéâ', 'üéà', 'üåà', 'üé≠']
    }
}

class DreamAnalyzerBot:
    def __init__(self):
        self.user_data = {}
    
    def analyze_dream(self, dream_text: str, style: str = 'mystical') -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é"""
        dream_lower = dream_text.lower()
        found_symbols = []
        meanings = []
        
        # –ü–æ–∏—Å–∫ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–Ω–∞
        for symbol, symbol_meanings in DREAM_SYMBOLS.items():
            if symbol in dream_lower:
                found_symbols.append(symbol)
                meanings.extend(symbol_meanings)
        
        # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        if not found_symbols:
            meanings = [
                '–Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
                '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                '–ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è',
                '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ',
                '–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –æ—Ç–¥—ã—Ö–µ',
                '–ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏',
                '—Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–º–µ–Ω',
                '–∂–µ–ª–∞–Ω–∏–µ —Å–∞–º–æ—Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
                '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä',
                '—Å–∫—Ä—ã—Ç–∞—è —Ç—Ä–µ–≤–æ–≥–∞',
                '–ø—É—Ç—å –∫ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º—É —Ä–æ—Å—Ç—É',
                '–Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞',
                '–æ–∂–∏–¥–∞–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è',
                '–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç',
                '—Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –≥–∞—Ä–º–æ–Ω–∏–∏',
                '–∂–µ–ª–∞–Ω–∏–µ –±—ã—Ç—å —É—Å–ª—ã—à–∞–Ω–Ω—ã–º',
                '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É —ç—Ç–∞–ø—É',
                '–ø–æ–∏—Å–∫ —É—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ',
                '–æ–±–æ—Å—Ç—Ä—ë–Ω–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è',
                '–∂–µ–ª–∞–Ω–∏–µ —É–π—Ç–∏ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏',
                '–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –æ—Ç–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—à–ª–æ–µ',
                '–æ—Ç—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π'
            ]
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –±–µ—Ä–µ–º –¥–æ 3 –∑–Ω–∞—á–µ–Ω–∏–π
        unique_meanings = list(set(meanings))[:3]
        
        # –í—ã—á–∏—Å–ª—è–µ–º "–∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å"
        mystery_level = min(10, len(found_symbols) * 2 + random.randint(3, 7))
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = random.choice(PREDICTIONS)
        
        return {
            'symbols': found_symbols,
            'meanings': unique_meanings,
            'mystery_level': mystery_level,
            'prediction': prediction,
            'style': style
        }
    
    def format_analysis(self, analysis: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        style_info = ANALYSIS_STYLES[analysis['style']]
        emoji = random.choice(style_info['emojis'])
        result = f"{emoji} {style_info['name']} –∞–Ω–∞–ª–∏–∑ —Å–Ω–∞:\n"
        result += f"{style_info['prefix']}\n"
        
        if analysis['symbols']:
            result += "üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:\n"
            for symbol in analysis['symbols'][:5]:
                result += f"‚Ä¢ {symbol}\n"
            result += "\n"
        
        result += "üí≠ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:\n"
        for meaning in analysis['meanings']:
            result += f"‚Ä¢ {meaning}\n"
        
        result += f"\n‚≠ê –£—Ä–æ–≤–µ–Ω—å –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏: {analysis['mystery_level']}/10\n"
        result += f"\nüîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {analysis['prediction']}"
        return result

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = DreamAnalyzerBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """üåô –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –°–Ω–æ–≤! üåô
–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —Å–≤–æ–π —Å–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–≥–∞–¥–∞—Ç—å –µ–≥–æ —Ç–∞–π–Ω—ã–π —Å–º—ã—Å–ª!
–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help'),
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å", callback_data='style'),
            InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
            # InlineKeyboardButton("–ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞", callback_data='test')

        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """üîÆ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
2. –Ø –Ω–∞–π–¥—É —Å–∏–º–≤–æ–ª—ã –∏ –¥–∞–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
3. –ü–æ–ª—É—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–Ω–∞!
üé® –°—Ç–∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π - –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∞—É—á–Ω—ã–π - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥  
‚Ä¢ –í–µ—Å–µ–ª—ã–π - –ª–µ–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
    keyboard = [
        [
            InlineKeyboardButton("üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='style_mystical'),
            InlineKeyboardButton("üß† –ù–∞—É—á–Ω—ã–π", callback_data='style_scientific')
        ],
        [
            InlineKeyboardButton("üòÑ –í–µ—Å–µ–ª—ã–π", callback_data='style_fun')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(help_text, reply_markup=reply_markup)

async def style_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /style"""
    user_id = update.effective_user.id
    current_style = bot.user_data.get(user_id, {}).get('style', 'mystical')
    current_style_name = ANALYSIS_STYLES[current_style]['name']
    style_text = f"""üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∞–Ω–∞–ª–∏–∑–∞:
–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {current_style_name}
‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π - –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∞—É—á–Ω—ã–π - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –í–µ—Å–µ–ª—ã–π - –ª–µ–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏"""

    keyboard = [
        [
            InlineKeyboardButton("üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='style_mystical'),
            InlineKeyboardButton("üß† –ù–∞—É—á–Ω—ã–π", callback_data='style_scientific')
        ],
        [
            InlineKeyboardButton("üòÑ –í–µ—Å–µ–ª—ã–π", callback_data='style_fun')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(style_text, reply_markup=reply_markup)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    user_id = update.effective_user.id
    
    if user_id not in bot.user_data or 'dreams_count' not in bot.user_data[user_id]:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø–µ—Ä–≤—ã–π —Å–æ–Ω üò¥")
        return
    
    user_stats = bot.user_data[user_id]
    dreams_count = user_stats.get('dreams_count', 0)
    total_mystery = user_stats.get('total_mystery', 0)
    avg_mystery = total_mystery / dreams_count if dreams_count > 0 else 0
    
    stats_text = f"""üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤:
üåô –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤: {dreams_count}
‚≠ê –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏: {avg_mystery:.1f}/10
üé® –¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {ANALYSIS_STYLES.get(user_stats.get('style', 'mystical'))['name']}"""
    
    await update.message.reply_text(stats_text)

async def analyze_dream_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    user_style = bot.user_data.get(user_id, {}).get('style', 'mystical')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–Ω
    analysis = bot.analyze_dream(message_text, style=user_style)
    response = bot.format_analysis(analysis)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in bot.user_data:
        bot.user_data[user_id] = {}
    
    bot.user_data[user_id]['dreams_count'] = bot.user_data[user_id].get('dreams_count', 0) + 1
    bot.user_data[user_id]['total_mystery'] = bot.user_data[user_id].get('total_mystery', 0) + analysis['mystery_level']
    bot.user_data[user_id]['style'] = user_style
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help'),
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å", callback_data='style'),
            InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(response, reply_markup=reply_markup)

async def style_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    try:
        query = update.callback_query
        await query.answer()
        style = query.data.split('_')[1]  # –ø–æ–ª—É—á–∞–µ–º mystical, scientific, fun
        user_id = query.from_user.id
        
        if user_id not in bot.user_data:
            bot.user_data[user_id] = {}
        
        bot.user_data[user_id]['style'] = style
        style_name = ANALYSIS_STYLES[style]['name']
        
        # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = [
            [
                InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help'),
                InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å", callback_data='style'),
                InlineKeyboardButton("–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úÖ –°—Ç–∏–ª—å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {style_name}\n\nüåô –†–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ–π —Å–æ–Ω, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ!",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ style_callback: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (help, style, stats)"""
    try:
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        data = query.data
        
        if data == 'help':
            help_text = """üîÆ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:
1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π —Å–æ–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
2. –Ø –Ω–∞–π–¥—É —Å–∏–º–≤–æ–ª—ã –∏ –¥–∞–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
3. –ü–æ–ª—É—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–Ω–∞!
üé® –°—Ç–∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:
‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π - –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∞—É—á–Ω—ã–π - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥  
‚Ä¢ –í–µ—Å–µ–ª—ã–π - –ª–µ–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏"""
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='style_mystical'),
                    InlineKeyboardButton("üß† –ù–∞—É—á–Ω—ã–π", callback_data='style_scientific')
                ],
                [
                    InlineKeyboardButton("üòÑ –í–µ—Å–µ–ª—ã–π", callback_data='style_fun')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(help_text, reply_markup=reply_markup)
        
        elif data == 'style':
            current_style = bot.user_data.get(user_id, {}).get('style', 'mystical')
            current_style_name = ANALYSIS_STYLES[current_style]['name']
            style_text = f"""üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∞–Ω–∞–ª–∏–∑–∞:
–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {current_style_name}
‚Ä¢ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π - –∑–∞–≥–∞–¥–æ—á–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è
‚Ä¢ –ù–∞—É—á–Ω—ã–π - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥
‚Ä¢ –í–µ—Å–µ–ª—ã–π - –ª–µ–≥–∫–∏–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç—Ä–∞–∫—Ç–æ–≤–∫–∏"""
            
            keyboard = [
                [
                    InlineKeyboardButton("üîÆ –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π", callback_data='style_mystical'),
                    InlineKeyboardButton("üß† –ù–∞—É—á–Ω—ã–π", callback_data='style_scientific')
                ],
                [
                    InlineKeyboardButton("üòÑ –í–µ—Å–µ–ª—ã–π", callback_data='style_fun')
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(style_text, reply_markup=reply_markup)
        
        elif data == 'stats':
            if user_id not in bot.user_data or 'dreams_count' not in bot.user_data[user_id]:
                await query.edit_message_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤! –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –ø–µ—Ä–≤—ã–π —Å–æ–Ω üò¥")
                return
            
            user_stats = bot.user_data[user_id]
            dreams_count = user_stats.get('dreams_count', 0)
            total_mystery = user_stats.get('total_mystery', 0)
            avg_mystery = total_mystery / dreams_count if dreams_count > 0 else 0
            
            stats_text = f"""üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–Ω–æ–≤:
üåô –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤: {dreams_count}
‚≠ê –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏: {avg_mystery:.1f}/10
üé® –¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å: {ANALYSIS_STYLES.get(user_stats.get('style', 'mystical'))['name']}"""
            
            await query.edit_message_text(stats_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_callback: {e}")
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    admin_ids = list(map(int, os.getenv("ADMIN_IDS", "").split(",")))

    if user_id not in admin_ids:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
        [InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_export")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞–º–∏", callback_data="admin_symbols")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=reply_markup)



def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("style", style_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ - –í–ê–ñ–ù–û: –ø–æ—Ä—è–¥–æ–∫ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ!
    # –°–Ω–∞—á–∞–ª–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø–æ—Ç–æ–º –æ–±—â–∏–µ

    application.add_handler(CallbackQueryHandler(button_callback, pattern="^(help|style|stats)$"))
    application.add_handler(CallbackQueryHandler(style_callback, pattern="^style_"))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–Ω–∞–º–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_dream_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ;)")
    application.run_polling()

if __name__ == '__main__':
    main()